use abacus_lib;

pub fn main() {
    println!("Abacus");
    let key:[u8; 16] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];
    let data:[u8; 64] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];
    println!("data={:?}", data);
    let e = abacus_lib::algorithm::symmetric_encryption::sm4::sm4_cbc::sm4_cbc_encrypt_data(&data, key, key);
    println!("e={:?}", e);
    let de = abacus_lib::algorithm::symmetric_encryption::sm4::sm4_cbc::sm4_cbc_decrypt_data(e.as_slice(), key, key);
    println!("de={:?}", de);
}
